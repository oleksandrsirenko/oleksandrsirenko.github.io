/* File: src/styles/base/_responsive.scss */
@use 'variables' as *;
@use 'mixins' as *;
@use 'sass:map';
@use 'sass:math';

// Container width constraints for different viewport sizes
.container {
  width: 100%;
  margin: 0 auto;
  padding: 0 map.get($spacing, 'lg');
  
  @include breakpoint('sm') {
    max-width: 540px;
  }
  
  @include breakpoint('md') {
    max-width: 720px;
  }
  
  @include breakpoint('lg') {
    max-width: 960px;
  }
  
  @include breakpoint('xl') {
    max-width: 1140px;
  }
  
  @include breakpoint('xxl') {
    max-width: 1320px;
  }
}

// Fluid typography system
@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: math.unit($min-vw);
  $u2: math.unit($max-vw);
  $u3: math.unit($min-font-size);
  $u4: math.unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

// Responsive images
.responsive-image {
  width: 100%;
  height: auto;
  
  &.cover {
    object-fit: cover;
    width: 100%;
    height: 100%;
  }
  
  &.contain {
    object-fit: contain;
    max-width: 100%;
    max-height: 100%;
  }
}

// Responsive video container
.video-container {
  position: relative;
  padding-bottom: 56.25%; // 16:9 aspect ratio
  height: 0;
  overflow: hidden;
  
  iframe, video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: 0;
  }
}

// Responsive tables
.table-responsive {
  display: block;
  width: 100%;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
}

// Visibility utilities
@each $breakpoint, $value in $breakpoints {
  .hide-for-#{$breakpoint}-down {
    @media (max-width: ($value - 1px)) {
      display: none !important;
    }
  }
  
  .hide-for-#{$breakpoint}-up {
    @media (min-width: $value) {
      display: none !important;
    }
  }
}

// Helper functions
@function strip-unit($value) {
  @return math.div($value, ($value * 0 + 1));
}