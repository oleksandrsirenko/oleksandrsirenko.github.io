/* File: src/styles/base/_mixins.scss */
@use "variables" as *;
@use "sass:map";

// Media Queries
@mixin breakpoint($point, $direction: 'min') {
  @if $direction == 'max' {
    @if map.has-key($breakpoints, $point) {
      @media (max-width: (map.get($breakpoints, $point) - 1px)) {
        @content;
      }
    } @else {
      @media (max-width: $point) {
        @content;
      }
    }
  } @else {
    @if map.has-key($breakpoints, $point) {
      @media (min-width: map.get($breakpoints, $point)) {
        @content;
      }
    } @else {
      @media (min-width: $point) {
        @content;
      }
    }
  }
}

// Flexbox utilities
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

// Grid utilities
@mixin grid($columns: 1, $gap: map.get($spacing, 'md')) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// Typography
@mixin font-size($size, $line-height: 1.5) {
  @if map.has-key($font-sizes, $size) {
    font-size: map.get($font-sizes, $size);
  } @else {
    font-size: $size;
  }
  line-height: $line-height;
}

// Transitions
@mixin transition($property: all, $speed: map.get($transition-speed, 'normal'), $ease: $transition-ease) {
  transition: $property $speed $ease;
}

// Container
@mixin container($max-width: 1200px, $padding: map.get($spacing, 'md')) {
  width: 100%;
  max-width: $max-width;
  margin-left: auto;
  margin-right: auto;
  padding-left: $padding;
  padding-right: $padding;
}

// Shadows
@mixin shadow($level: 'md') {
  @if $level == 'sm' {
    box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  } @else if $level == 'md' {
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  } @else if $level == 'lg' {
    box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  } @else if $level == 'xl' {
    box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
  }
}

// Truncate text
@mixin truncate($lines: 1) {
  @if $lines == 1 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// Color utilities
@mixin color($color-name, $opacity: 1) {
  @if map.has-key($colors, $color-name) {
    color: rgba(map.get($colors, $color-name), $opacity);
  } @else {
    color: $color-name;
  }
}

@mixin bg-color($color-name, $opacity: 1) {
  @if map.has-key($colors, $color-name) {
    background-color: rgba(map.get($colors, $color-name), $opacity);
  } @else {
    background-color: $color-name;
  }
}

// Focus styles
@mixin focus-ring($color: 'secondary', $offset: 2px) {
  @if map.has-key($colors, $color) {
    $focus-color: map.get($colors, $color);
    &:focus-visible {
      outline: 2px solid $focus-color;
      outline-offset: $offset;
    }
  } @else {
    &:focus-visible {
      outline: 2px solid $color;
      outline-offset: $offset;
    }
  }
}